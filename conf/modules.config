/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (params.download_cache){
        withName: 'ENSEMBLVEP_DOWNLOAD' {
            ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
            publishDir       = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/cache/" }
            ]
        }
    }
    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
                                "${params.vep_params}",
                                (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
                                ].join(' ').trim()
                            }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:VCFANNOTATEPANEL:ENSEMBLVEP_VEP' {
        ext.args         = { [
            "${params.vep_params}",
            '--tab'
            ].join(' ').trim() }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/panelannotation" },
                pattern: "*{gz}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECAPTUREDPANELS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/capturedpanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSALL' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSNONPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSEXONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSINTRONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSALL' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsall" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsprotaffect" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSNONPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsnonprotaffect" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSEXONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsexons" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSINTRONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsintrons" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }


    withName: 'SUBSETDEPTHS' {
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'SUBSETMUTATIONS' {
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'SUBSETPILEUP' {
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = 'pile'
        publishDir       = [
                enabled : false
        ]
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*ALL:.*" {
            ext.prefix       = { "${meta.id}.all" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*INTRONS:.*" {
            ext.prefix       = { "${meta.id}.introns" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*PROT:.*" {
            ext.prefix       = { "${meta.id}.prot_aff" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*NONPROT:.*" {
            ext.prefix       = { "${meta.id}.non_prot_aff" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*EXONS:.*" {
            ext.prefix       = { "${meta.id}.exons" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*MULTI:.*" {
            ext.prefix       = { "${meta.id}.multi" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*NONPROTMULTI:.*" {
            ext.prefix       = { "${meta.id}.non_prot_aff.multi" }
    }


    withName: 'VCF2MAF' {
        ext.level            = "${params.confidence_level}"
        ext.all_molecules_dp = params.all_duplex_counts
    }

    withName: 'POSTPROCESSVEPPANEL' {
        ext.canonical_only  = "${params.panel_with_canonical}"
    }

    withName: 'FILTERBATCH|MERGEBATCH|FILTERPANEL|VCF2MAF|COMPUTE_MUTABILITY|MATRIX_CONCAT|COMPUTETRINUC|POSTPROCESSVEPPANEL|COMPUTEDEPTHS' {
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'PLOTMAF' {
        ext.filters     = { [['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                            ['"DEPTH" : "ge ', "${params.mutation_depth_threshold}", '"'].join('').trim()].join(',\t').trim()
                        }
        ext.plots       = { ['"global":["per_sample", "per_gene", "filter_stats SAMPLE_ID n_rich,no_pileup_support,other_sample_SNP", "filter_stats canonical_SYMBOL n_rich,no_pileup_support,other_sample_SNP", "plot_stats SAMPLE_ID canonical_Consequence_broader,TYPE", "plot_stats canonical_SYMBOL canonical_Consequence_broader,TYPE"]'].join(',\t').trim() }
    }

    if (params.all_duplex_counts){
        withName: 'SOMATICMUTATIONS' {
            ext.filters     = { ['"FILTER" : "notcontains n_rich"',
                                ['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"VAF_AM" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"DEPTH" : "ge ', "${params.mutation_depth_threshold}", '"'].join('').trim(),
                                '"FILTER": "notcontains no_pileup_support"',
                                '"FILTER": "notcontains low_mappability"',
                                '"FILTER": "notcontains other_sample_SNP"'].join(',\t').trim()
                            }
            ext.output_prefix = '.somatic'
            ext.output_fmt  = { ['"header": true'].join(',\t').trim() }
    //              CONSIDER RESTRICTING SOME COLUMNS HERE ALREADY
    //                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
    //                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
    //                                '"columns": ["SAMPLE_ID", "canonical_SYMBOL", "canonical_Consequence", "canonical_Amino_acids", "canonical_Protein_position"]',
    //                                "canonical_SYMBOL" "Protein_affecting" "TYPE"
    //        publishDir       = [
    //                enabled : false
    //        ]
        }
    } else {
        withName: 'SOMATICMUTATIONS' {
            ext.filters     = { ['"FILTER" : "notcontains n_rich"',
                                ['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"DEPTH" : "ge ', "${params.mutation_depth_threshold}", '"'].join('').trim(),
                                '"FILTER": "notcontains no_pileup_support"',
                                '"FILTER": "notcontains low_mappability"',
                                '"FILTER": "notcontains other_sample_SNP"'].join(',\t').trim()
                            }
            ext.output_prefix = '.somatic'
            ext.output_fmt  = { ['"header": true'].join(',\t').trim() }
    //              CONSIDER RESTRICTING SOME COLUMNS HERE ALREADY
    //                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
    //                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
    //                                '"columns": ["SAMPLE_ID", "canonical_SYMBOL", "canonical_Consequence", "canonical_Amino_acids", "canonical_Protein_position"]',
    //                                "canonical_SYMBOL" "Protein_affecting" "TYPE"
    //        publishDir       = [
    //                enabled : false
    //        ]
        }

    }


    withName: 'FILTERBATCH' {
            ext.repetitive_variant = params.repetitive_variant_thres
            ext.germline_threshold = params.germline_threshold
    }


    withName: "TABLE2GROUP" {
        ext.features       = params.features_table_dict
        ext.separator      = params.features_table_separator
    }


    withName: "PILEUPBAM.*" {
        ext.args         = "--no-BAQ \
                            --max-depth 0 \
                            --min-BQ 2 \
                            --no-output-ends \
                            --output-extra QNAME"
    }



    withName: 'SUBSET_MUTPROFILE' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
                                '"colnames": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: '.*NONPROT:SUBSET_MUTPROFILE' {
        ext.filters     = { [ '"TYPE" : "SNV"',
                                '"Protein_affecting": "not protein_affecting"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
                                '"colnames": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }


    withName: 'SUBSET_MUTABILITY' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "SYMBOL"]',
                                '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "SYMBOL"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'COMPUTE_MATRIX' {
        ext.args        = '--method unique \
                                --pseud 0.5 \
                                --per_sample \
                                --sigprofiler'
    }

    withName: 'COMPUTE_TRINUCLEOTIDE' {
        ext.args        = '--pseud 1'
    }

    withName: 'COMPUTE_PROFILE' {
        ext.args        = "--plot --wgs --sigprofiler"
    }

    withName: 'COMPUTE_MUTABILITY' {
        ext.args        = "--adjust_local_rate"
    }

    withName: 'MUTABILITY_BGZIPTABIX' {
        ext.args        = ''
        ext.args2       = '-b 2 -e 2'
    }

    if (params.mutationrate) {
        withName: 'SUBSET_MUTRATE' {
            ext.filters     = ''

            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID",  "MUT_ID", "ALT_DEPTH", "canonical_SYMBOL", "TYPE"]',
                                    '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "GENE", "TYPE"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }

        withName: 'BBG_DEEPCSA:DEEPCSA:MUTRATEPROT:SUBSET_MUTRATE' {
            ext.filters     = { ['"Protein_affecting": "protein_affecting"'].join(',\t').trim()
                            }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID",  "MUT_ID", "ALT_DEPTH", "canonical_SYMBOL", "TYPE"]',
                                    '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "GENE", "TYPE"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }

        withName: '.*NONPROT:SUBSET_MUTRATE' {
            ext.filters     = { ['"Protein_affecting": "not protein_affecting"'].join(',\t').trim()
                            }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID",  "MUT_ID", "ALT_DEPTH", "canonical_SYMBOL", "TYPE"]',
                                    '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "GENE", "TYPE"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }

    }


    if (params.indels) {
        withName: 'SUBSET_INDELS' {
            ext.filters     = ''

            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID",  "MUT_ID", "SYMBOL", "INDEL_INFRAME", "Protein_affecting", "TYPE", "MUT_ID"]',
                                    '"colnames": ["SAMPLE_ID",  "MUT_ID", "SYMBOL", "INDEL_INFRAME", "Protein_affecting", "TYPE", "MUT_ID"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }
    }



    if (params.mutated_epithelium) {
        withName: 'SUBSET_MUTEPI' {
            ext.filters     = { ['"Protein_affecting": "protein_affecting"'].join(',\t').trim() }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["CHROM",  "POS", "ALT_DEPTH", "TYPE"]',
                                    '"colnames": ["CHROM",  "POS", "ALT_DEPTH", "TYPE"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }
    }

    if (params.mutated_epithelium_vaf) {
        withName: 'SUBSET_MUTEPIVAF' {
            ext.filters     = { ['"Protein_affecting": "protein_affecting"',
                                        '"TYPE" : "SNV"',
                                        '"VAF" : "gt 0"',
                                        ].join(',\t').trim() }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["CHROM", "POS", "REF", "ALT", "SYMBOL", "DEPTH", "ALT_DEPTH", "VAF"]',
                                    '"colnames": ["CHROM", "POS", "REF", "ALT", "SYMBOL", "DEPTH", "ALT_DEPTH", "VAF"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }
        if (params.all_duplex_counts){
            withName: 'SUBSET_MUTEPIVAFAM' {
                ext.filters     = { ['"Protein_affecting": "protein_affecting"',
                                        '"TYPE" : "SNV"',
                                        '"VAF_AM" : "gt 0"',
                                        ].join(',\t').trim() }

                ext.output_fmt  = { ['"header": true',
                                        '"columns": ["CHROM", "POS", "REF", "ALT", "SYMBOL", "DEPTH_AM", "ALT_DEPTH_AM", "VAF_AM"]',
                                        '"colnames": ["CHROM", "POS", "REF", "ALT", "SYMBOL", "DEPTH", "ALT_DEPTH", "VAF"]'
                                    ].join(',\t').trim()
                                }

                publishDir       = [
                        enabled : false
                ]
            }
        }

    }

    if (params.oncodrivefml) {
        withName: 'SUBSET_ONCODRIVEFML' {
            ext.filters     = { "" }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
                                    '"colnames": ["CHROMOSOME", "POSITION", "REF", "ALT", "SAMPLE"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }

        withName: 'ONCODRIVEFMLSNVS' {
            ext.cadd_scores = "${params.cadd_scores}"
            ext.args        = "--no-indels --debug"
        }
        withName: 'ONCODRIVEFML' {
            ext.cadd_scores = "${params.cadd_scores}"
            ext.args        = "--debug"
        }
    }

    if (params.oncodrive3d){
        withName: 'SUBSET_ONCODRIVE3D' {
            ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
    //                                '"canonical_Consequence": "contains missense_variant"'
                            }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID", "canonical_SYMBOL", "canonical_Consequence", "canonical_Amino_acids", "canonical_Protein_position", "MUT_ID"]',
                                    '"colnames": ["Tumor_Sample_Barcode", "SYMBOL", "Consequence", "Amino_acids", "Protein_position", "MUT_ID"]'
                                ].join(',\t').trim()
                            }
            publishDir       = [
                    enabled : false
            ]
        }

        withName: 'ONCODRIVE3D_PREPROCESSING' {
            publishDir       = [
                    enabled : false
            ]
        }

        withName: 'ONCODRIVE3D_RUN' {
            ext.args        = "-s 128"
            ext.vep_raw     = params.o3d_raw_vep
            ext.mane        = false
            publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/oncodrive3d/run" },
                    pattern: "**{tsv,log,csv,json}"
                ]
    //                enabled : false
            ]
        }


        if (params.o3d_plot) {
            withName: 'ONCODRIVE3D_PLOT' {
                publishDir       = [
                    [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/oncodrive3d/plot" },
                        pattern: "**{png,log,csv}"
                    ]
        //                enabled : false
                ]
            }
        }

        if (params.o3d_plot_chimerax) {
            withName: 'ONCODRIVE3D_PLOT_CHIMERAX' {
                publishDir       = [
                    [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/oncodrive3d/plotchimerax" },
                        pattern: "**{png,log,defattr}"
                    ]
        //                enabled : false
                ]
            }
        }
    }








    withName: 'SUBSET_ONCODRIVECLUSTL' {
        ext.filters     = { "" }

//        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
//                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
                                '"colnames": ["CHROMOSOME", "POSITION", "REF", "ALT", "SAMPLE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }


    withName: 'ONCODRIVEFMLBED' {
        ext.tool        = "oncodrivefml"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVECLUSTLBED' {
        ext.tool        = "oncodriveclustl"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'READSPOSBED' {
        ext.tool        = "readsxposition"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVECLUSTL' {
        ext.args        = "-sim region_restricted \
                            -kmer 3 \
                            --clustplot \
                            --clustplotsig \
                            --qqplot \
                            --seed 123"
    }



    if (params.omega){
        withName: 'SUBSET_OMEGA' {
            ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                            }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID"]',
                                    '"colnames": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }


        withName: '.*MULTI:SUBSET_OMEGA' {
            ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                            }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID", "ALT_DEPTH"]',
                                    '"colnames": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID", "EFFECTIVE_MUTS"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }


        withName: 'PREPROCESSING' {
            ext.args        = ""
            publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/omega/preprocessing" },
                    pattern: "*{tsv}"
                ]
    //                enabled : false
            ]
        }

        withName: 'ESTIMATOR' {
            ext.option      = 'mle'
            ext.args        = ""
            publishDir       = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/omega" },
                    pattern: "*{tsv}"
                ]
            ]
        }

        if (params.omega_globalloc){
            withName: 'PREPROCESSINGGLOBALLOC' {
                ext.assembly    = 'hg38'
                ext.args        = ""
                ext.global_loc  = true
                publishDir       = [
                    [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/omegagloballoc/preprocessing" },
                        pattern: "*{tsv}"
                    ]
                ]
            }

            withName: 'ESTIMATORGLOBALLOC' {
                ext.option      = 'mle'
                ext.args        = ""
                publishDir       = [
                    [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/omegagloballoc" },
                        pattern: "*{tsv}"
                    ]
                ]
            }
        }
    }

    if (params.signatures){
        withName: 'MSIGHDP' {
            ext.k_guess     = '12'
            ext.args        = ""
        }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    if (params.vep_genome == 'GRCh38') {
        withName: 'POSTPROCESS_VEP_ANNOTATION|SITESFROMPOSITIONS|SUMMARIZE_ANNOTATION|SIGPROFILERASSIGNMENT|ONCODRIVECLUSTL|POSTPROCESSVEPPANEL' {
            ext.assembly    = 'hg38'
        }

        // Omega
        if (params.omega){
            withName: 'PREPROCESSING|ESTIMATOR' {
                ext.assembly    = 'hg38'
            }
        }

    } else if (params.vep_genome == 'GRCm38') {
        withName: 'POSTPROCESS_VEP_ANNOTATION|SITESFROMPOSITIONS|SUMMARIZE_ANNOTATION|SIGPROFILERASSIGNMENT|ONCODRIVECLUSTL|POSTPROCESSVEPPANEL' {
            ext.assembly    = 'mm10'
        }

        // Omega
        if (params.omega){
            withName: 'PREPROCESSING|ESTIMATOR' {
                ext.assembly    = 'mm10'
            }
        }

    } else if (params.vep_genome == 'GRCm39') {
        withName: 'POSTPROCESS_VEP_ANNOTATION|SITESFROMPOSITIONS|SUMMARIZE_ANNOTATION|SIGPROFILERASSIGNMENT|ONCODRIVECLUSTL|POSTPROCESSVEPPANEL' {
            ext.assembly    = 'mm39'
        }

        // Omega
        if (params.omega){
            withName: 'PREPROCESSING|ESTIMATOR' {
                ext.assembly    = 'mm39'
            }
        }
    }


}
