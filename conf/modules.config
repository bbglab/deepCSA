/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (params.download_cache){
        withName: 'ENSEMBLVEP_DOWNLOAD' {
            ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
            publishDir       = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/cache/" }
            ]
        }
    }
    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
                                "${params.vep_params}",
                                (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
                                ].join(' ').trim()
                            }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:VCFANNOTATEPANEL:VCF_ANNOTATE_ENSEMBLVEP:ENSEMBLVEP_VEP' {
        ext.args         = { [
            "${params.vep_params}",
            '--tab'
            ].join(' ').trim() }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/panelannotation" },
                pattern: "*{gz}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECAPTUREDPANELS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/capturedpanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSALL' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsall" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsprotaffect" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSNONPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsnonprotaffect" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSEXONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsexons" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSINTRONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsintrons" },
            ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }



}
