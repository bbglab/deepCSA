/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (params.download_cache){
        withName: 'ENSEMBLVEP_DOWNLOAD' {
            ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
            publishDir       = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/cache/" }
            ]
        }
    }
    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
                                "${params.vep_params}",
                                (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
                                ].join(' ').trim()
                            }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:VCFANNOTATEPANEL:ENSEMBLVEP_VEP' {
        ext.args         = { [
            "${params.vep_params}",
            '--tab'
            ].join(' ').trim() }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/panelannotation" },
                pattern: "*{gz}"
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECAPTUREDPANELS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/capturedpanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSALL' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSNONPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSEXONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELSINTRONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSALL' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsall" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsprotaffect" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSNONPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsnonprotaffect" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSEXONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsexons" },
            ]
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSINTRONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsintrons" },
            ]
        ]
    }


    withName: 'SUBSETDEPTHS' {
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'SUBSETMUTATIONS' {
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*ALL:.*" {
            ext.prefix       = { "${meta.id}.all" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*INTRONS:.*" {
            ext.prefix       = { "${meta.id}.introns" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*PROT:.*" {
            ext.prefix       = { "${meta.id}.prot_aff" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*NONPROT:.*" {
            ext.prefix       = { "${meta.id}.non_prot_aff" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*EXONS:.*" {
            ext.prefix       = { "${meta.id}.exons" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*MULTI:.*" {
            ext.prefix       = { "${meta.id}.multi" }
    }

    withName: "BBG_DEEPCSA:DEEPCSA:.*NONPROTMULTI:.*" {
            ext.prefix       = { "${meta.id}.non_prot_aff.multi" }
    }


    withName: 'VCF2MAF' {
        ext.level   = "${params.confidence_level}"
    }

    withName: 'FILTERBATCH|MERGEBATCH|FILTERPANEL|VCF2MAF|COMPUTE_MUTABILITY|MATRIX_CONCAT|COMPUTETRINUC|POSTPROCESSVEPPANEL' {
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'PLOTMAF' {
        ext.filters     = { ['"FILTER" : "notcontains n_rich"',
                            ['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                            ['"DEPTH" : "ge ', "${params.depth_threshold}", '"'].join('').trim(),
                            '"FILTER": "notcontains no_pileup_support"',
                            '"FILTER": "notcontains low_mappability"',
                            '"FILTER": "notcontains other_sample_SNP"'].join(',\t').trim()
                        }
        ext.plots       = { ['"global":["per_sample", "per_gene"]'].join(',\t').trim() }
    }


    withName: 'SOMATICMUTATIONS' {
        ext.filters     = { ['"FILTER" : "notcontains n_rich"',
                            ['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                            ['"DEPTH" : "ge ', "${params.depth_threshold}", '"'].join('').trim(),
                            '"FILTER": "notcontains no_pileup_support"',
                            '"FILTER": "notcontains low_mappability"',
                            '"FILTER": "notcontains other_sample_SNP"'].join(',\t').trim()
                        }
        ext.output_prefix = '.somatic'
        ext.output_fmt  = { ['"header": true'].join(',\t').trim() }
//              CONSIDER RESTRICTING SOME COLUMNS HERE ALREADY
//                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
//                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
//                                '"columns": ["SAMPLE_ID", "canonical_SYMBOL", "canonical_Consequence", "canonical_Amino_acids", "canonical_Protein_position"]',
//                                "canonical_SYMBOL" "Protein_affecting" "TYPE"
//        publishDir       = [
//                enabled : false
//        ]
    }


    withName: 'FILTERBATCH' {
            ext.repetitive_variant = "5"
            ext.germline_threshold = "${params.germline_threshold}"
    }


    withName: "TABLE2GROUP" {
        ext.features       = params.features_table_dict
        ext.separator      = params.features_table_separator
    }



    withName: 'SUBSET_MUTPROFILE' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
                                '"colnames": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: '.*NONPROT:SUBSET_MUTPROFILE' {
        ext.filters     = { [ '"TYPE" : "SNV"',
                                '"Protein_affecting": "not protein_affecting"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
                                '"colnames": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }


    withName: 'SUBSET_MUTABILITY' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "SYMBOL"]',
                                '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "SYMBOL"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'COMPUTE_MATRIX' {
        ext.args        = '--method unique \
                                --pseud 0.5 \
                                --per_sample \
                                --sigprofiler'
    }

    withName: 'COMPUTE_TRINUCLEOTIDE' {
        ext.args        = '--pseud 1'
    }

    withName: 'COMPUTE_PROFILE' {
        ext.args        = "--plot --wgs --sigprofiler"
    }

    withName: 'COMPUTE_MUTABILITY' {
        ext.args        = "--adjust_local_rate"
    }

    withName: 'MUTABILITY_BGZIPTABIX' {
        ext.args        = ''
        ext.args2       = '-b 2 -e 2'
    }

    withName: 'SUBSET_MUTRATE' {
        ext.filters     = { [ '"TYPE" : "SNV"' ].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID",  "MUT_ID", "ALT_DEPTH", "canonical_SYMBOL"]',
                                '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "GENE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'BBG_DEEPCSA:DEEPCSA:MUTRATEPROT:SUBSET_MUTRATE' {
        ext.filters     = { ['"TYPE" : "SNV"',
                            '"Protein_affecting": "protein_affecting"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID",  "MUT_ID", "ALT_DEPTH", "canonical_SYMBOL"]',
                                '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "GENE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: '.*NONPROT:SUBSET_MUTRATE' {
        ext.filters     = { ['"TYPE" : "SNV"',
                            '"Protein_affecting": "not protein_affecting"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID",  "MUT_ID", "ALT_DEPTH", "canonical_SYMBOL"]',
                                '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "GENE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'SUBSET_ONCODRIVEFML' {
        ext.filters     = { "" }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
                                '"colnames": ["CHROMOSOME", "POSITION", "REF", "ALT", "SAMPLE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVEFMLSNVS' {
        ext.args        = "--no-indels"
    }

    withName: 'SUBSET_ONCODRIVE3D' {
        ext.filters     = { ['"TYPE" : "SNV"',
                                '"canonical_Consequence": "contains missense_variant"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "canonical_SYMBOL", "canonical_Consequence", "canonical_Amino_acids", "canonical_Protein_position"]',
                                '"colnames": ["#UploadedVariation", "SYMBOL", "Consequence", "Amino_acids", "Protein_position"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVE3D' {
        ext.args        = "-s 128"
        errorStrategy   = 'ignore'
    }


    withName: 'SUBSET_OMEGA' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID"]',
                                '"colnames": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }


    withName: '.*MULTI:SUBSET_OMEGA' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID", "ALT_DEPTH"]',
                                '"colnames": ["CHROM", "POS", "REF", "ALT", "SAMPLE_ID", "EFFECTIVE_MUTS"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }


    withName: 'SUBSET_ONCODRIVECLUSTL' {
        ext.filters     = { "" }

//        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
//                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
                                '"colnames": ["CHROMOSOME", "POSITION", "REF", "ALT", "SAMPLE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }


    withName: 'ONCODRIVEFMLBED' {
        ext.tool        = "oncodrivefml"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVECLUSTLBED' {
        ext.tool        = "oncodriveclustl"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVECLUSTL' {
        ext.assembly    = 'hg38'
        ext.args        = "-sim region_restricted \
                            -kmer 3 \
                            --clustplot \
                            --clustplotsig \
                            --qqplot \
                            --seed 123"
    }


    withName: 'PREPROCESSING' {
        ext.assembly    = 'hg38'
        ext.args        = ""
//        publishDir       = [
//                enabled : false
//        ]
    }

    withName: 'ESTIMATOR' {
        ext.assembly    = 'hg38'
        ext.option      = 'bayes'
        ext.args        = ""
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/omega" },
                pattern: "*{tsv}"
            ]
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    if (params.vep_genome == 'GRCm38') {
        withName: 'POSTPROCESS_VEP_ANNOTATION|SITESFROMPOSITIONS|SUMMARIZE_ANNOTATION|SIGPROFILERASSIGNMENT|ONCODRIVECLUSTL' {
            ext.assembly    = 'mm10'
        }
    } else if (params.vep_genome == 'GRCh38') {
        withName: 'POSTPROCESS_VEP_ANNOTATION|SITESFROMPOSITIONS|SUMMARIZE_ANNOTATION|SIGPROFILERASSIGNMENT|ONCODRIVECLUSTL' {
            ext.assembly    = 'hg38'
        }
    }


}
