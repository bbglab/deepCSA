/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ENSEMBLVEP_DOWNLOAD' {
        ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/cache/" }
        ]
    }

    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
                                "${params.vep_params}",
                                (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
                                ].join(' ').trim()
                            }

        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'COMPUTEDEPTHS' {
        ext.restrict_panel      = params.use_custom_bedfile
        ext.minimum_depth       = params.use_custom_minimum_depth
        ext.args                = "-H"

        publishDir       = [
                enabled : false
        ]
    }



    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:VCFANNOTATEPANEL:ENSEMBLVEP_VEP' {
        ext.args         = "${params.vep_params_panel} --tab"

        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/panelannotation" },
                pattern: "*{gz}"
            ]
        ]
    }

    withName: 'CUSTOMPROCESSING' {
        ext.simple = true
    }

    withName: 'CUSTOMPROCESSINGRICH' {
        ext.simple = false
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATECAPTUREDPANELS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/capturedpanels" },
                pattern: "*{tsv,bed}"
            ]
        ],
        ext.wave = [enabled: true]
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATECONSENSUSPANELS.*' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/consensuspanels" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }


    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSALL' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsall" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsprotaffect" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSNONPROTAFFECT' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsnonprotaffect" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSEXONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsexons" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSINTRONS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelsintrons" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'BBGTOOLS:DEEPCSA:CREATEPANELS:CREATESAMPLEPANELSSYNONYMOUS' {
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/createpanels/samplepanels/createsamplepanelssynonymous" },
                pattern: "*{tsv,bed}"
            ]
        ]
    }

    withName: 'FILTEREXONS' {
        ext.filtername      = 'not_in_exons'
    }

    withName: 'FILTERPANEL' {
        ext.filtername      = 'not_covered'
    }

    withName: 'SUBSETDEPTHS' {
        ext.prefix    = { "${meta.id}.subset_depths" }
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'SUBSETPANEL' {
        ext.prefix    = { "${meta.id}.subset_panel" }
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }
    if (params.store_depths){
        withName: 'DEPTHS.*CONS' {
            ext.prefix    = { "${meta.id}.subset_depths" }
            ext.args      = ''
            ext.args2     = '-s 1 -b 2 -e 2'
            ext.args3     = '-h'
            ext.extension = 'tsv'
            ext.header    = '1'
        }
    } else {
        withName: 'DEPTHS.*CONS' {
            ext.prefix    = { "${meta.id}.subset_depths" }
            ext.args      = ''
            ext.args2     = '-s 1 -b 2 -e 2'
            ext.args3     = '-h'
            ext.extension = 'tsv'
            ext.header    = '1'
            publishDir       = [
                enabled : false
            ]
        }

    }


    withName: 'SUBSETMUTATIONS' {
        ext.prefix    = { "${meta.id}.subset_mutations" }
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = '1'
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'SUBSETPILEUP' {
        ext.prefix    = { "${meta.id}.subset_pileup" }
        ext.args      = ''
        ext.args2     = '-s 1 -b 2 -e 2'
        ext.args3     = '-h'
        ext.extension = 'tsv'
        ext.header    = 'pile'
        publishDir       = [
                enabled : false
        ]
    }

    withName: "BBGTOOLS:DEEPCSA:.*ALL:.*" {
            ext.prefix       = { "${meta.id}.all" }
    }

    if (params.profileintrons){
        withName: "BBGTOOLS:DEEPCSA:.*INTRONS:.*" {
                ext.prefix       = { "${meta.id}.introns" }
        }
    }

    withName: "BBGTOOLS:DEEPCSA:.*PROT:.*" {
            ext.prefix       = { "${meta.id}.prot_aff" }
    }

    withName: "BBGTOOLS:DEEPCSA:.*NONPROT:.*" {
            ext.prefix       = { "${meta.id}.non_prot_aff" }
    }

    if (params.profileexons){
        withName: "BBGTOOLS:DEEPCSA:.*EXONS:.*" {
            ext.prefix       = { "${meta.id}.exons" }
        }
    }

    withName: 'VCF2MAF' {
        ext.level            = "${params.confidence_level}"
        ext.all_molecules_dp = params.all_duplex_counts
    }

    withName: 'POSTPROCESSVEPPANEL' {
        ext.canonical_only  = params.panel_with_canonical
    }

    withName: 'FILTERBATCH|MERGEBATCH|FILTERPANEL|VCF2MAF|COMPUTE_MUTABILITY|MATRIX_CONCAT|COMPUTETRINUC|COMPUTEDEPTHS' {
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'PLOTMAF' {
        ext.filters     = { [['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                            ['"DEPTH" : "ge ', "${params.mutation_depth_threshold}", '"'].join('').trim()].join(',\t').trim()
                        }
        ext.plots       = { ['"global":["per_sample", "per_gene", "filter_stats SAMPLE_ID n_rich,no_pileup_support,other_sample_SNP", "filter_stats canonical_SYMBOL n_rich,no_pileup_support,other_sample_SNP", "plot_stats SAMPLE_ID canonical_Consequence_broader,TYPE,MUTTYPE", "plot_stats canonical_SYMBOL canonical_Consequence_broader,TYPE,MUTTYPE"]'].join(',\t').trim() }
    }

    withName: 'PLOTSOMATICMAF' {
        ext.filters     = ""
        ext.plots       = { ['"global":["per_sample", "per_gene", "plot_stats SAMPLE_ID canonical_Consequence_broader,canonical_Protein_affecting,TYPE,MUTTYPE", "plot_stats canonical_SYMBOL canonical_Consequence_broader,canonical_Protein_affecting,TYPE,MUTTYPE"]'].join(',\t').trim() }
    }

    if (params.plot_depths){
        withName: ".*PLOTDEPTHSALLCONS:PLOTDEPTHS" {
            ext.prefix       = { "${meta.id}.all_cons" }
        }

        withName: ".*PLOTDEPTHSEXONS:PLOTDEPTHS" {
            ext.prefix       = { "${meta.id}.exons" }
        }

        withName: ".*PLOTDEPTHSEXONSCONS:PLOTDEPTHS" {
            ext.prefix       = { "${meta.id}.exons_cons" }
        }
    }

    // '"FILTER" : ["notcontains NM20", "notcontains p8", "notcontains n_rich", "notcontains cohort_n_rich_threshold", "notcontains cohort_n_rich", "notcontains no_pileup_support", "notcontains low_mappability", "notcontains not_covered" ]',
    if (params.all_duplex_counts){
        withName: 'SOMATICMUTATIONS' {
            ext.filters     = { [['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"VAF_AM" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"vd_VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"DEPTH" : "ge ', "${params.mutation_depth_threshold}", '"'].join('').trim(),
                                '"FILTER" : ' + params.filter_criteria.collect { "\"$it\"" }.toString(),
                                '"VAF_distorted_expanded_sq" : false',
                                ].join(',\t').trim()
                            }
            ext.output_prefix = '.somatic'
            ext.output_fmt  = { ['"header": true'].join(',\t').trim() }
        }
    } else {
        withName: 'SOMATICMUTATIONS' {
            ext.filters     = { [['"VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"vd_VAF" : "le ', "${params.germline_threshold}", '"'].join('').trim(),
                                ['"DEPTH" : "ge ', "${params.mutation_depth_threshold}", '"'].join('').trim(),
                                '"FILTER" : ' + params.filter_criteria.collect { "\"$it\"" }.toString(),
                                '"VAF_distorted_expanded_sq" : false',
                                ].join(',\t').trim()
                            }
            ext.output_prefix = '.somatic'
            ext.output_fmt  = { ['"header": true'].join(',\t').trim() }
        }

    }


    withName: 'FILTERBATCH' {
        ext.repetitive_variant = params.repetitive_variant_thres
        ext.germline_threshold = params.germline_threshold
    }


    withName: "TABLE2GROUP" {
        ext.features       = params.features_table_dict
        ext.separator      = params.features_table_separator
    }

    withName: "GROUPGENES" {
        ext.custom          = params.custom_groups
        ext.hotspots        = params.omega_withingene
        ext.separator       = params.custom_groups_separator
    }

    withName: 'EXPANDREGIONS' {
        ext.expansion = params.omega_hotspots_bedfile ? params.hotspot_expansion : 0
        ext.using_bedfile = params.omega_autodomains | (params.omega_hotspots_bedfile as Boolean)
    }

    // if (params.expected_mutated_cells){
    //     withName: "BBGTOOLS:DEEPCSA:EXPECTEDMUTATEDCELLS:SUBSETDEPTHS" {
    //     }
    // }


    withName: 'SUBSETMUTPROFILE' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
                                '"colnames": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    if (params.profilenonprot){
        withName: '.*NONPROT:SUBSETMUTPROFILE' {
            ext.filters     = { [ '"TYPE" : "SNV"',
                                    '"Protein_affecting": "non_protein_affecting"'].join(',\t').trim()
                            }
            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]',
                                    '"colnames": ["SAMPLE_ID", "CONTEXT_MUT", "MUT_ID", "ALT_DEPTH"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }
    }


    withName: 'COMPUTE_MATRIX' {
        ext.args        = '--method unique \
                                --pseud 0 \
                                --per_sample \
                                --sigprofiler'
    }

    withName: 'COMPUTE_TRINUCLEOTIDE' {
        ext.args        = '--pseud 1'
    }

    withName: 'COMPUTE_PROFILE' {
        ext.args        = "--plot --wgs --sigprofiler"
    }

    withName: 'SUBSETMUTABILITY' {
        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "SYMBOL"]',
                                '"colnames": ["SAMPLE_ID", "MUT_ID", "ALT_DEPTH", "SYMBOL"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'COMPUTE_MUTABILITY' {
        ext.args        = "--adjust_local_rate"
    }

    withName: 'MUTABILITY_BGZIPTABIX' {
        ext.args        = ''
        ext.args2       = '-b 2 -e 2'
    }


    withName: 'SUBSET_DNDS' {
            ext.filters     = ''

            ext.output_fmt  = { ['"header": false',
                                    '"columns": ["SAMPLE_ID",  "CHROM_ensembl",  "POS", "REF", "ALT"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
    }


    if (params.indels) {
        withName: 'SUBSETINDELS' {
            // ext.filters     = ''
            ext.filters     = { ['"FILTER": "notcontains repetitive_variant"'].join(',\t').trim() }

            ext.output_fmt  = { ['"header": true',
                                    '"columns": ["SAMPLE_ID",  "MUT_ID", "SYMBOL", "INDEL_INFRAME", "Protein_affecting", "TYPE", "MUT_ID"]',
                                    '"colnames": ["SAMPLE_ID",  "MUT_ID", "SYMBOL", "INDEL_INFRAME", "Protein_affecting", "TYPE", "MUT_ID"]'
                                ].join(',\t').trim()
                            }

            publishDir       = [
                    enabled : false
            ]
        }
    }


    if (params.mutated_cells_vaf) {
        if (params.all_duplex_counts){
            withName: 'SUBSETMUTEPIVAFAM' {
                ext.output_fmt  = { ['"header": true',
                                        '"columns": ["CHROM", "canonical_SYMBOL", "canonical_Consequence_broader", "VAF_AM", "ALT_DEPTH_AM", "DEPTH_AM", "canonical_Protein_affecting", "TYPE", "VAF_ND", "ALT_DEPTH_ND", "DEPTH_ND", "VAF", "ALT_DEPTH", "DEPTH", "MUT_ID"]',
                                        '"colnames": ["CHROM", "GENE", "Consequence_broader", "VAF_AM", "ALT_DEPTH_AM", "DEPTH_AM", "Protein_affecting", "TYPE", "VAF_ND", "ALT_DEPTH_ND", "DEPTH_ND", "VAF", "ALT_DEPTH", "DEPTH", "MUT_ID"]'
                                    ].join(',\t').trim()
                                }
                publishDir       = [
                        enabled : false
                ]
            }
            withName: 'MUTATEDGENOMESFROMVAFAM' {
                ext.recode_list     = "${params.mutepi_genes_to_recode}"// "TERTpromoter"
            }
        }

    }


    withName: 'SUBSETONCODRIVECLUSTL' {
        ext.filters     = { "" }

//        ext.filters     = { ['"TYPE" : "SNV"'].join(',\t').trim()
//                        }
        ext.output_fmt  = { ['"header": true',
                                '"columns": ["CHROM_ensembl", "POS_ensembl", "REF_ensembl", "ALT_ensembl", "SAMPLE_ID"]',
                                '"colnames": ["CHROMOSOME", "POSITION", "REF", "ALT", "SAMPLE"]'
                            ].join(',\t').trim()
                        }

        publishDir       = [
                enabled : false
        ]
    }

    withName: 'EXPECTEDMUTATEDCELLS' {
        ext.metadata_file  = params.features_table
    }


    withName: 'INTERVALSBED' {
        ext.tool        = "oncodrivefml"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVECLUSTLBED' {
        ext.tool        = "oncodriveclustl"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'READSPOSBED' {
        ext.tool        = "readsxposition"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'ONCODRIVECLUSTL' {
        ext.args        = "-sim region_restricted \
                            -kmer 3 \
                            --clustplot \
                            --clustplotsig \
                            --qqplot \
                            --seed 123"
    }


    if (params.signatures){
        withName: 'MSIGHDP' {
            ext.k_guess     = '12'
            ext.args        = ""
        }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: 'SUMANNOTATION' {
        ext.hotspots_annotation    = params.hotspots_annotation
    }

    withName: 'POSTPROCESS_VEP_ANNOTATION|SITESFROMPOSITIONS|SUMMARIZE_ANNOTATION|SIGPROFILERASSIGNMENT|ONCODRIVECLUSTL|POSTPROCESSVEPPANEL' {
        ext.assembly = {
            if (params.vep_genome == 'GRCh38') {
                return 'hg38'
            } else if (params.vep_genome == 'GRCm38') {
                return 'mm10'
            } else if (params.vep_genome == 'GRCm39') {
                return 'mm39'
            } else {
                // Default case or error handling
                return 'unknown'
            }
        }
    }

}


includeConfig 'tools/omega.config'
includeConfig 'tools/mutrate.config'
includeConfig 'tools/oncodrive3d.config'
includeConfig 'tools/oncodrivefml.config'
