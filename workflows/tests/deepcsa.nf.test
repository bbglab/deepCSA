nextflow_pipeline {
    name "Test DEEPCSA Pipeline"
    script "main.nf"

    test("Should run DEEPCSA pipeline with minimal parameters") {

        when {
            params {
                outdir = "output"
                input = "test_data/samplesheet.csv"
                features_table = "test_data/features.tsv"
                vep_species = "homo_sapiens"
                profileall = true
                mutationdensity = true
                omega = true
                oncodrivefml = true
                oncodrive3d = true
                indels = true
                signatures = true
                downsample = false
                regressions = false
                expected_mutated_cells = false
                mutated_cells_vaf = false
                oncodriveclustl = false
                dnds = false
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() > 0
            
            // Check key output directories exist
            assert path("output/mutdensity").exists()
            assert path("output/omega").exists()
            assert path("output/oncodrivefml").exists()
            assert path("output/oncodrive3d").exists()
            assert path("output/indels").exists()
            assert path("output/signatures").exists()
            
            // Verify specific output files
            assert path("output/mutdensity/all_mutdensities.tsv").exists()
            assert path("output/pipeline_info/execution_report.html").exists()
            assert path("output/pipeline_info/execution_timeline.html").exists()
            
            // Check MultiQC report generation
            assert path("output/multiqc/multiqc_report.html").exists()
            
            // Verify no failed tasks
            assert workflow.trace.failed().size() == 0
            
            // Check expected number of tasks completed
            with(workflow.trace) {
                assert succeeded().size() >= 10 // Adjust based on expected minimum tasks
                assert tasks().every { it.exitStatus == 0 }
            }
        }
    }

    test("Should handle custom gene groups and BED file") {

        when {
            params {
                outdir = "output_custom"
                input = "test_data/samplesheet.csv"
                features_table = "test_data/features.tsv"
                custom_groups_file = "test_data/custom_groups.tsv"
                custom_bedfile = "test_data/custom_regions.bed"
                vep_species = "homo_sapiens"
                profileall = true
                mutationdensity = true
                omega = true
                oncodrivefml = true
                oncodrive3d = true
                indels = true
            }
        }

        then {
            assert workflow.success
            
            // Verify custom inputs were processed
            assert workflow.trace.succeeded().find { it.name == "TABLE2GROUP" }
            assert workflow.trace.succeeded().find { it.name == "CREATEPANELS" }
            
            // Check custom output processing
            assert path("output_custom/panels").exists()
            assert path("output_custom/depths").exists()
            
            // Verify no errors in custom file processing
            assert !workflow.errorReport
        }
    }

    test("Should fail gracefully with invalid input") {

        when {
            params {
                outdir = "output_fail"
                input = "test_data/nonexistent.csv"
                features_table = "test_data/nonexistent.tsv"
            }
        }

        then {
            assert workflow.failed
            assert workflow.errorReport.contains("Input file does not exist")
        }
    }
}
 